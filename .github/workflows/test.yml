name: Test

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  # Replace pull_request with pull_request_target if you
  # plan to use this action with forks, see the Limitations section
  pull_request:
    branches:
      - main

env: # environment variables (available in any part of the action)
  NODE_VERSION: 19
  PYTHON_VERSION: 3.11
  MONGODB_VERSION: 6.0

jobs:
  run-js-linters:
    name: Run JS linters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run eslint
        run: npm run lint

  run-python-linters:
    name: Run Python linters
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Run black
        uses: psf/black@stable

  test-backend:
    name: Run backend unit tests
    runs-on: ubuntu-latest
    needs: run-python-linters
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: ${{ env.MONGODB_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: cache deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with dev
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Test with pytest
        run: poetry run pytest --cov=app tests --cov-report html

      # upload-artifact action does not take into account working-directory default
      # see https://github.com/actions/upload-artifact/issues/232
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: backend/htmlcov

  test-frontend:
    name: Run frontend unit tests
    runs-on: ubuntu-latest
    needs: run-js-linters
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run tests
        run: npm run test
